(ns moclojer.native-image
  (:require [clojure.string :as string]))

(def initialize-at-build-time
  "list of classes to initialize at build time"
  (str
   "--initialize-at-build-time="
   (string/join
    ","
    ["org.yaml.snakeyaml.DumperOptions$FlowStyle"
     "org.yaml.snakeyaml.DumperOptions$ScalarStyle"
     "com.fasterxml.jackson.core.io.CharTypes"
     "com.fasterxml.jackson.dataformat.cbor.CBORFactory"
     "org.apache.poi.hssf.usermodel.HSSFCellStyle"
     "org.eclipse.jetty.util.log.Log"
     "org.eclipse.jetty.http2.hpack.HpackEncoder"
     "org.eclipse.jetty.http.HttpHeader"
     "com.fasterxml.jackson.core.JsonFactory"
     "org.eclipse.jetty.http.PreEncodedHttpField$1"
     "org.eclipse.jetty.util.StringUtil"
     "org.eclipse.jetty.util.component.AbstractLifeCycle"
     "com.fasterxml.jackson.core.JsonGenerator"
     "org.eclipse.jetty.util.BufferUtil"
     "io.opentracing.util.GlobalTracer"
     "org.eclipse.jetty.http.DateGenerator"
     "org.eclipse.jetty.util.Uptime"
     "org.eclipse.jetty.http.HttpVersion"
     "org.eclipse.jetty.server.Response"
     "org.eclipse.jetty.http2.hpack.HpackContext$1"
     "org.eclipse.jetty.http.HttpScheme"
     "org.eclipse.jetty.http.PreEncodedHttpField"
     "com.fasterxml.jackson.dataformat.smile.SmileFactory"
     "org.eclipse.jetty.util.ssl.SslContextFactory"
     "org.eclipse.jetty.http.HttpMethod"
     "com.fasterxml.jackson.core.io.SerializedString"
     "org.eclipse.jetty.http2.hpack.Huffman"
     "org.eclipse.jetty.http2.hpack.HpackContext"
     "org.slf4j.LoggerFactory"
     "org.eclipse.jetty.util.log.JettyAwareLogger"
     "org.slf4j.jul.JDK14LoggerAdapter"
     "com.fasterxml.jackson.core.io.JsonStringEncoder"
     "org.slf4j.jul.JDK14LoggerAdapter$1"])))

(def initialize-at-run-time
  "list of classes to initialize at run time"
  (str "--initialize-at-run-time="
       (string/join
        ","
        ["moclojer.config__init"
         "cognitect.transit__init"
         "clojure.core.async.impl.concurrent__init"
         "clojure.core.async.impl.buffers__init"
         "babashka.cli__init"
         "io.pedestal.http.body_params__init"
         "moclojer.core__init"
         "clojure.core.async.impl.exec.threadpool__init"
         "clojure.core.async.impl.dispatch__init"
         "clojure.core.async.impl.concurrent__init"
         "moclojer.server__init"
         "clojure.core.async.impl.channels__init"
         "moclojer.router__init"
         "clojure.core.async__init"
         "clojure.core.async.impl.timers__init"
         "io.pedestal.http__init"
         "clojure.core.async.impl.ioc_macros__init"
         "moclojer.specs.moclojer__init"
         "io.pedestal.http.cors__init"
         "io.pedestal.http.impl.servlet_interceptor__init"
         "io.pedestal.http.jetty.container__init"
         "io.pedestal.http.jetty__init"
         "moclojer.watcher__init"
         "io.pedestal.http.route__init"
         "io.pedestal.interceptor.chain__init"
         "clojure.reflect.java__init"
         "clojure.datafy__init"
         "clojure.data.json__init"
         "clojure.core.cache__init"
         "clojure.tools.analyzer.jvm.utils__init"
         "clojure.reflect__init"
         "clojure.core.memoize__init"
         "clojure.tools.analyzer.jvm__init"
         "clojure.tools.analyzer.passes.jvm.analyze_host_expr__init"
         "clojure.tools.analyzer.passes.jvm.annotate_host_info__init"
         "clojure.tools.analyzer.passes.jvm.annotate_tag__init"
         "clojure.tools.analyzer.passes.jvm.box__init"
         "clojure.tools.analyzer.passes.jvm.classify_invoke__init"
         "clojure.tools.analyzer.passes.jvm.constant_lifter__init"
         "clojure.tools.analyzer.passes.jvm.infer_tag__init"
         "clojure.tools.analyzer.passes.jvm.validate__init"
         "clojure.tools.analyzer.passes.jvm.validate_loop_locals__init"
         "clojure.tools.analyzer.passes.jvm.warn_on_reflection__init"
         "io.pedestal.http.request.servlet_support__init"
         "clojure.pprint.dispatch__init"
         "clojure.stacktrace__init"
         "moclojer.io_utils__init"
         "flatland.ordered.map__init"
         "yaml.core__init"
         "yaml.reader__init"
         "yaml.writer__init"
         "flatland.useful.debug__init"])))

(def trace-class-initialization
  "list of classes to trace class initialization"
  (str "--trace-class-initialization="
       (string/join
        ","
        ["clojure.core.async.impl.exec.threadpool__init"
         "moclojer.config__init,clojure.core.async.impl.concurrent__init,babashka.cli__init"
         "cognitect.transit__init"
         "io.pedestal.http.body_params__init,clojure.core.async.impl.dispatch__init,clojure.core.async.impl.buffers__init,cognitect.transit__init"
         "clojure.core.async.impl.channels__init"
         "clojure.core.async.impl.timers__init"
         "clojure.core.async__init"
         "clojure.core.async.impl.ioc_macros__init"
         "io.pedestal.http.jetty.container__init"
         "clojure.tools.analyzer.jvm.utils__init,clojure.core.cache__init,clojure.datafy__init,clojure.reflect.java__init"
         "clojure.reflect__init,clojure.core.memoize__init"
         "clojure.tools.analyzer.passes.jvm.analyze_host_expr__init"
         "clojure.tools.analyzer.passes.jvm.annotate_host_info__init"
         "clojure.tools.analyzer.passes.jvm.annotate_tag__init"
         "clojure.tools.analyzer.passes.jvm.box__init"
         "clojure.tools.analyzer.passes.jvm.classify_invoke__init"
         "clojure.tools.analyzer.passes.jvm.constant_lifter__init"
         "clojure.tools.analyzer.passes.jvm.infer_tag__init"
         "clojure.tools.analyzer.passes.jvm.validate__init"
         "clojure.tools.analyzer.passes.jvm.validate_loop_locals__init"
         "clojure.tools.analyzer.passes.jvm.warn_on_reflection__init"
         "clojure.stacktrace__init"
         "clojure.pprint.dispatch__init"
         "flatland.ordered.map__init"
         "yaml.core__init"])))
